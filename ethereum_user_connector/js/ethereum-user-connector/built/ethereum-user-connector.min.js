!function(){return function e(t,s,r){function a(n,d){if(!s[n]){if(!t[n]){var o="function"==typeof require&&require;if(!d&&o)return o(n,!0);if(i)return i(n,!0);var u=new Error("Cannot find module '"+n+"'");throw u.code="MODULE_NOT_FOUND",u}var h=s[n]={exports:{}};t[n][0].call(h.exports,function(e){return a(t[n][1][e]||e)},h,h.exports,e,t,s,r)}return s[n].exports}for(var i="function"==typeof require&&require,n=0;n<r.length;n++)a(r[n]);return a}}()({1:[function(e,t,s){var r=this;
/*!
 * AddressStatus - Visualize Signature status for Address field.
 * @author Thorsten Krug
 * @license  GPL2
 */Drupal.behaviors.ethereumUserConnectorAddressStatus={attach:()=>{r.elm=document.getElementById("ethereum-status"),r.elm.getAttribute("data-initialized")||(r.elm.setAttribute("data-initialized",!0),Drupal.behaviors.ethereumUserConnectorAddressStatus=new class{constructor(e){this.elm=e,this.addressField=document.getElementById("edit-field-ethereum-address-0-value"),this.addressField.addEventListener("change",e=>{this.addressChanged(e,this)}),this.previousAddress={val:this.elm.getAttribute("data-valid-address"),status:this.elm.getAttribute("data-val")?this.elm.getAttribute("data-val"):"0"},this.currentAddress=JSON.parse(JSON.stringify(this.previousAddress)),this.dataMap=JSON.parse(this.elm.getAttribute("data-map")),this.cssMap=JSON.parse(this.elm.getAttribute("data-css-map"))}addressChanged(e,t){const s=e.target,r=s.value.trim().toLocaleLowerCase();r&&s.validity.valid?(s.classList.remove("error"),t.setAddress(r)):r&&s.classList.add("error")}setAddress(e){this.currentAddress.val=e,this.isValidated(e)?this.currentAddress.status="2":this.currentAddress.status="1",this.addressField.value=e,this.updateStatusField()}updateStatusField(){document.getElementById("ethereum-status-address").textContent=this.currentAddress.val,document.getElementById("ethereum-status-message").textContent=this.dataMap[parseInt(this.currentAddress.status,10)],this.elm.classList.forEach(e=>{-1!==this.cssMap.indexOf(e)&&this.elm.classList.remove(e)}),this.elm.classList.add(this.cssMap[this.currentAddress.status]),document.getElementById("ethereum-verify").style.display="2"===this.currentAddress.status?"none":"inline-block"}hasVerifiedAddress(){return this.previousAddress.val&&"2"===this.previousAddress.status}setAddressIfEmpty(e){this.currentAddress.val||(this.currentAddress.val=e,this.updateStatusField())}isValidated(e){return e===this.previousAddress.val&&"2"===this.previousAddress.status}}(r.elm))}}},{}],2:[function(e,t,s){Drupal.theme.message=((e,t="status")=>{let s=`<div role="contentinfo" class="messages messages--${t}"><div role="alert">`;return s+=`<h2 class="visually-hidden">${t.charAt(0).toUpperCase()}${t.slice(1)} message</h2>`,s+=`${e}</div></div>`}),window.addEventListener("web3Ready",()=>{window.web3Runner.runWhenReady({requireAccount:!0,networkId:drupalSettings.ethereum.network.id,run:(e,t=null)=>{Drupal.behaviors.ethereum_user_connector=new
/*!
 * UserConnector - Ethereum Registry Contract.
 * @author Thorsten Krug
 * @license  GPL2
 */
class{constructor(e,t){this.web3=e,this.address=t.toLowerCase(),this.cnf=drupalSettings.ethereumUserConnector,this.processTxUrl=drupalSettings.ethereum.processTxUrl,this.authHash=null,this.message=document.getElementById("myMessage"),this.button=document.getElementById("ethereum-verify").getElementsByTagName("button")[0],this.button.addEventListener("click",e=>{this.validateEthereumUser(e)}),this.contract=new e.eth.Contract(drupalSettings.ethereum.contracts.register_drupal.jsonInterface,drupalSettings.ethereum.contracts.register_drupal.address),this.validateContract(),Drupal.behaviors.ethereumUserConnectorAddressStatus.hasVerifiedAddress()||(Drupal.behaviors.ethereumUserConnectorAddressStatus.setAddress(this.address),this.getAuthHash())}async validateEthereumUser(e){e.preventDefault();let t=!1;try{this.authHash||await this.getAuthHash();const e=await this.checkPreviousSubmission();e?this.verifySubmission(e):await this.contract.methods.newUser(`0x${this.authHash}`).send({from:this.address}).on("transactionHash",e=>{const t=`Submitted your verification. TX ID: ${e}\n                  <br /> Transaction is pending Ethereum Network Approval.\n                  <br /> It takes some time for Drupal to validate the transaction. Please be patient.`;this.message.innerHTML+=Drupal.theme("message",t),this.button.remove(),this.transactionHash=e}).on("receipt",e=>{this.receipt=e,this.verifySubmission(e.transactionHash)})}catch(e){if(t=e.message.includes("denied transaction"))this.message.innerHTML+=Drupal.theme("message","You rejected the Transaction","error");else{const t=`<pre> ${e.message}</pre>`;this.message.innerHTML+=Drupal.theme("message",t,"error")}window.console.error(e)}}async validateContract(){const e=await this.contract.methods.contractExists().call();if(e);else{const e=`Can not verify contract at given address: ${this.cnf.contractAddress}`;this.message.innerHTML+=Drupal.theme("message",e,"error")}this.contractVerified=e}async getAuthHash(){const e=`${this.cnf.updateAccountUrl+this.address}?_format=json&t=${(new Date).getTime()}`,t=await fetch(e,{method:"get",credentials:"same-origin"});if(!t.ok){const e="Can not get a hash. Check permission for 'Access GET on Update Ethereum account resource'";this.message.innerHTML+=Drupal.theme("message",e,"error")}const s=await t.json();this.authHash=s.hash}async checkPreviousSubmission(){let e=null;const t=await this.web3.eth.getPastLogs({fromBlock:"0x0",address:drupalSettings.ethereum.contracts.register_drupal.address,topics:[this.web3.utils.sha3("AccountCreated(address,bytes32)"),`0x000000000000000000000000${this.address.slice(2)}`]});return t.length&&t.forEach(t=>{t.data===`0x${this.authHash}`&&(e=t.transactionHash)}),e}async verifySubmission(e){const t=`${this.processTxUrl+e}?_format=json&t=${(new Date).getTime()}`,s=await fetch(t,{method:"get",credentials:"same-origin"});if(!s.ok){const e="Can not get verificationUrl";this.message.innerHTML+=Drupal.theme("message",e,"error")}const r=await s.json(),a=r.register_drupal.AccountCreated[0].error?"error":"status";this.message.innerHTML=Drupal.theme("message",r.register_drupal.AccountCreated[0].message,a),r.register_drupal.AccountCreated[0].error}}(e,t)}})})},{}]},{},[2,1]);
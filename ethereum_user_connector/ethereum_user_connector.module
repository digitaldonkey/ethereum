<?php

/**
 * @file
 * Contains ethereum_user_connector.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;
use Drupal\ethereum_user_connector\Controller\EthereumUserConnectorController as UserConnector;
use Drupal\Core\Form\FormStateInterface;
use Ethereum\EthereumStatic;

define('ETHEREUM_USER_CONNECTOR_AUTH_ROLE', 'authorized_ethereum_user');

/**
 * Provide default value callback.
 */
function ethereum_user_connector_default_status() {
  return 0;
}

/**
 * Pre save handler.
 *
 * Handles actions related to field_ethereum_account_status status changes.
 *  - Create hash when Ethereum address is updated.
 *  - Set status to Unverified (1) when Ethereum address is updated.
 *  - Adds/remove Role authorized_ethereum_user depending on status.
 *
 * @param \Drupal\user\Entity\User $user
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 * @throws \Exception
 */
function ethereum_user_connector_user_presave(User $user) {
  global $base_url;

  if (empty($user->field_ethereum_address->getValue())) {
    // No address so remove hash and verification status.
    $user->field_ethereum_drupal_hash->set(0, '');
    $user->field_ethereum_account_status->set(0, 0);
  }
  else {

    $last_address = null;

    if ($user->original) {
      $last_address = $user->original->field_ethereum_address->getString();
      $last_hash = $user->original->field_ethereum_drupal_hash->getString();
    }

    $curr_address = strtolower($user->field_ethereum_address->getString());
    $curr_contract = UserConnector::getContractAddress();

    // Generate a hash of this Drupal instance, Smart Contract and User address.
    $hash = EthereumStatic::removeHexPrefix(EthereumStatic::sha3($base_url . $curr_address . $curr_contract));

    if (!$last_address || $last_hash !== $hash) {
      $user->field_ethereum_drupal_hash->set(0, $hash);
      $user->field_ethereum_account_status->set(0, 1);
    }
  }

  // Add/remove authorized_ethereum_user role.
  $account_status = $user->field_ethereum_account_status->getString();
  if ($account_status == "2") {
    $user->addRole(ETHEREUM_USER_CONNECTOR_AUTH_ROLE);
  }
  else {
    $user->removeRole(ETHEREUM_USER_CONNECTOR_AUTH_ROLE);
  }
}

/**
 * Implements hook_theme().
 */
function ethereum_user_connector_theme() {
  return [
    'field_ethereum_account_status' => [
      'template' => 'ethereum_address_confirm',
      'render element' => 'field_ethereum_account_status',
    ],
  ];
}

/**
 * Implements hook_preprocess_field().
 *
 * Prepare template variables for field_ethereum_account_status template.
 *
 * @inheritdoc
 */
function ethereum_user_connector_preprocess_field_ethereum_account_status(&$variables) {
  $variables['title'] = $variables['field_ethereum_account_status']['#title'];
  $variables['address'] = $variables['field_ethereum_account_status']['#user_ethereum_address'];
  $variables['status_map'] = $variables['field_ethereum_account_status']['#status_map'];
  $variables['hash'] = $variables['field_ethereum_account_status']['#ethereum_drupal_hash'];
  $variables['status_id'] = $variables['field_ethereum_account_status']['#status_number'];
  $variables['status'] = $variables['field_ethereum_account_status']['#status'];
}

/**
 * Implements hook_preprocess_field().
 *
 * Make Drupal hash read-only.
 *
 * @inheritdoc;
 */
function ethereum_user_connector_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $form['field_ethereum_drupal_hash']['#disabled'] = TRUE;
}

/**
 * Implements hook_help().
 *
 * @inheritdoc
 */
function ethereum_user_connector_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ethereum_user_connector':
      return ethereum_get_readme_html('ethereum_user_connector');
    default:
  }
}

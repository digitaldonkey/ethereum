<?php

/**
 * @file
 * Contains ethereum_smartcontract.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function ethereum_smartcontract_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ethereum_smartcontract module.
    case 'help.page.ethereum_smartcontract':
      return ethereum_get_readme_html('ethereum_smartcontract');
    default:
  }
  return null;
}

/**
 * Implements hook_library_info_build().
 *
 * Loading smart contracts "dynamically" (they are still cached) based on configuration.
 *
 * @todo Consider loading the contracts ethereum_smartcontract/contracts.contractName
 *       Currently all are loaded on attaching ethereum_smartcontract/contracts.
 *
 * // @todo Do we need to invalidate cache on config change?
 *          $libraries['contracts']['#cache']['tags'] per Contract?
 *
 * You may load Contracts by attaching like:
 *
 * '#attached' => array(
 *    'library' => array(
 *    'ethereum_smartcontract/contracts',
 *   )
 * ),
 *
 * @return array $libraries
 *   An associative array of libraries registered by $extension. Keyed by
 *   internal library name and passed by reference.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 *
 * @return array Library.
 */
function ethereum_smartcontract_library_info_build() {
  global $base_url;
  $libraries = array();

  // Get smartcontract Entities.
  $contracts = \Drupal::entityTypeManager()->getStorage('smartcontract')->loadMultiple();
  $settings = ['ethereum' => ['contracts' => []]];
  $settings['ethereum']['processTxUrl'] = $base_url . '/ethereum/process_tx/';

  foreach ($contracts as $contract) {
    if ($contract->status()) {
      $settings['ethereum']['contracts'][$contract->id()] = $contract->getJsObject();
    }
  }
  $libraries['contracts'] = [
    'version' => '0.9',
    'dependencies' => [
        0 => 'core/drupalSettings'
    ],
    'drupalSettings' => $settings,
  ];
  return $libraries;
}
